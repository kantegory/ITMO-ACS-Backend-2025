services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST
      - POSTGRES_PORT
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 5s
      retries: 5

  redis:
    image: redis:8-alpine
    container_name: redis
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - '${RABBITMQ_PORT}:${RABBITMQ_PORT}'
      - '${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: swiftapp-api
    ports:
      - '${API_PORT}:${API_PORT}'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  movie-data:
    build:
      context: .
      dockerfile: Dockerfile.movie-data
    container_name: movie-data
    ports:
      - '${MOVIE_DATA_SERVICE_PORT}:${MOVIE_DATA_SERVICE_PORT}'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  movie-matching:
    build:
      context: .
      dockerfile: Dockerfile.movie-matching
    container_name: movie-matching
    ports:
      - '${MOVIE_MATCHING_SERVICE_PORT}:${MOVIE_MATCHING_SERVICE_PORT}'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
