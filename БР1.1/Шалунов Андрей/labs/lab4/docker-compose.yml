version: '3.8'

services:
  auth-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    restart: always

  user-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    volumes:
      - user-db-data:/var/lib/postgresql/data
    restart: always

  property-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: property_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    volumes:
      - property-db-data:/var/lib/postgresql/data
    restart: always

  photo-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: photo_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    volumes:
      - photo-db-data:/var/lib/postgresql/data
    restart: always

  booking-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: booking_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    volumes:
      - booking-db-data:/var/lib/postgresql/data
    restart: always

  message-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: message_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    volumes:
      - message-db-data:/var/lib/postgresql/data
    restart: always

  auth-service:
    build:
      context: ./auth-service
      args: { PORT: 3000 }
    env_file:
      - ./auth-service/.env
    ports:
      - '3000:3000'
    depends_on:
      - auth-db
    restart: always

  user-service:
    build:
      context: ./user-service
      args: { PORT: 3001 }
    env_file:
      - ./user-service/.env
    ports:
      - '3001:3001'
    depends_on:
      - user-db
    restart: always

  property-service:
    build:
      context: ./property-service
      args: { PORT: 3002 }
    env_file:
      - ./property-service/.env
    ports:
      - '3002:3002'
    depends_on:
      - property-db
    restart: always

  photo-service:
    build:
      context: ./photo-service
      args: { PORT: 3003 }
    env_file:
      - ./photo-service/.env
    ports:
      - '3003:3003'
    depends_on:
      - photo-db
    restart: always

  booking-service:
    build:
      context: ./booking-service
      args: { PORT: 3004 }
    env_file:
      - ./booking-service/.env
    ports:
      - '3004:3004'
    depends_on:
      - booking-db
      - user-service
    restart: always

  message-service:
    build:
      context: ./message-service
      args: { PORT: 3005 }
    env_file:
      - ./message-service/.env
    ports:
      - '3005:3005'
    depends_on:
      - message-db
      - user-service
      - booking-service
    restart: always

  api-gateway:
    build:
      context: ./api-gateway
      args: { PORT: 8000 }
    env_file:
      - ./api-gateway/.env
    ports:
      - '8000:8000'
    depends_on:
      - auth-service
      - user-service
      - property-service
      - photo-service
      - booking-service
      - message-service
    restart: always

volumes:
  auth-db-data:
  user-db-data:
  property-db-data:
  photo-db-data:
  booking-db-data:
  message-db-data: